{"remainingRequest":"/home/ubuntu/repos/Sage-docs/node_modules/babel-loader/lib/index.js??ref--3-1!/home/ubuntu/repos/Sage-docs/node_modules/@vuepress/theme-default/util/index.js","dependencies":[{"path":"/home/ubuntu/repos/Sage-docs/node_modules/@vuepress/theme-default/util/index.js","mtime":1735064969571},{"path":"/home/ubuntu/repos/Sage-docs/node_modules/cache-loader/dist/cjs.js","mtime":1735064969903},{"path":"/home/ubuntu/repos/Sage-docs/node_modules/babel-loader/lib/index.js","mtime":1735064969995}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}